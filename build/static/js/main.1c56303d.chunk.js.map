{"version":3,"sources":["assets/images/spacex_logo.svg","assets/images/satellite.svg","components/Header.js","components/Footer.js","components/SatSetting.js","components/SatelliteList.js","constants.js","components/WorldMap.js","components/Main.js","components/App.js","tests/reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","spacex_logo","alt","Component","Footer","SatSetting","showSatellite","values","_this","props","onShow","es_form","name","labelCol","flex","labelAlign","labelWrap","wrapperCol","colon","onFinish","this","Item","label","initialValue","rules","required","message","input_number","min","max","style","width","placeholder","es_button","type","htmlType","textAlign","SatelliteList","state","selected","onChange","e","_e$target","target","dataInfo","checked","list","addOrRemove","setState","item","status","found","some","entry","satid","concat","Object","toConsumableArray","filter","onShowSatMap","onShowMap","_this2","satList","satInfo","above","onClick","disabled","length","isLoad","spin","tip","size","es_list","itemLayout","dataSource","renderItem","actions","es_checkbox","Meta","avatar","satellite","title","satname","description","launchDate","SAT_API_KEY","STARLINK_CATEGORY","NEARBY_SATELLITE","BASE_URL","height","WorldMap","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","track","data","hasOwnProperty","Error","len","positions","context2","observerData","duration","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","fillText","d3TimeFormat","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","_this$map","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","geoKavrayskiy7","scale","translate","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","isLoading","d3Scale","schemeCategory10","React","createRef","axios","get","then","res","feature","objects","countries","features","catch","console","log","prevProps","prevState","snapshot","_this3","satData","_this$props$observerD","latitude","longitude","elevation","endTime","altitude","urls","url","Promise","all","arr","ref","Main","setting","isLoadingList","showNearbySatellite","fetchSatellite","err","showMap","pre","objectSpread","_this$state","row","col","span","components_SatSetting","components_SatelliteList","components_WorldMap","App","components_Header","components_Main","components_Footer","reportWebVitals","onPerfEntry","Function","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","components_App"],"mappings":"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","file":"static/js/main.1c56303d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacex_logo.b9d88695.svg\";","module.exports = __webpack_public_path__ + \"static/media/satellite.5dec5f6c.svg\";","import React, { Component } from 'react';\nimport spacex_logo from \"../assets/images/spacex_logo.svg\";\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={spacex_logo} className=\"App-logo\" alt=\"logo\" />\n                <p className=\"title\">\n                    StarLink Tracker\n                </p>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                ©2022 StarLink Tracker. All Rights Reserved. Website Made by Guochen Liao\n            </footer>\n\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport { Button, Form, InputNumber } from \"antd\";\n\nclass SatSetting extends Component {\n  showSatellite = (values) => {\n    this.props.onShow(values);\n  };\n\n  render() {\n    return (\n      <Form\n        name=\"wrap\"\n        labelCol={{\n          flex: \"110px\",\n        }}\n        labelAlign=\"left\"\n        labelWrap\n        wrapperCol={{\n          flex: 1,\n        }}\n        colon={false}\n        className=\"sat-setting\"\n        onFinish={this.showSatellite}\n      >\n        <Form.Item\n          label=\"Longitude(degress)\"\n          name=\"longitude\"\n          initialValue={70}\n          rules={[\n            {\n              required: true,\n              message: \"Please input your Longitude\",\n            },\n          ]}\n        >\n          <InputNumber\n            min={-180}\n            max={180}\n            \n            style={{ width: \"100%\" }}\n            placeholder=\"Please input Longitude\"\n          />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Latitude(degrees)\"\n          name=\"latitude\"\n          initialValue={-40}\n          rules={[\n            {\n              required: true,\n              message: \"Please input your Latitude\",\n            },\n          ]}\n        >\n          <InputNumber\n            min={-90}\n            max={90}\n            \n            style={{ width: \"100%\" }}\n            placeholder=\"Please input Latitude\"\n          />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Elevation(meters)\"\n          name=\"elevation\"\n          initialValue={100}\n          rules={[\n            {\n              required: true,\n              message: \"Please input your Elevation\",\n            },\n          ]}\n        >\n          <InputNumber\n            min={-413}\n            max={8850}\n            \n            style={{ width: \"100%\" }}\n            placeholder=\"Please input Elevation\"\n          />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Altitude(degrees)\"\n          name=\"altitude\"\n          initialValue={90}\n          rules={[\n            {\n              required: true,\n              message: \"Please input your Altitude\",\n            },\n          ]}\n        >\n          <InputNumber\n            min={0}\n            max={90}\n            \n            style={{ width: \"100%\" }}\n            placeholder=\"Please input Altitude\"\n          />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Duration(mins)\"\n          name=\"duration\"\n          initialValue={5}\n          rules={[\n            {\n              required: true,\n              message: \"Please input your Duration\",\n            },\n          ]}\n        >\n          <InputNumber\n            min={0}\n            max={90}\n            \n            style={{ width: \"100%\" }}\n            placeholder=\"Please input Duration\"\n          />\n        </Form.Item>\n\n        <Form.Item className=\"show-nearby\">\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{ textAlign: \"center\" }}\n          >\n            Find Satellite\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nexport default SatSetting;\n","import React, { Component } from \"react\";\nimport { Button, Spin, Avatar, List, Checkbox } from \"antd\";\n\nimport satellite from \"../assets/images/satellite.svg\";\n\nclass SatelliteList extends Component {\n  state = {\n    selected: [],\n  };\n\n  onChange = (e) => {\n    const { dataInfo, checked } = e.target;\n    const { selected } = this.state;\n    const list = this.addOrRemove(dataInfo, checked, selected);\n    this.setState({ selected: list });\n  };\n\n  addOrRemove = (item, status, list) => {\n      const found = list.some( entry => entry.satid === item.satid);\n      if (!found && status) {\n          list = [...list, item];\n      }\n      if (found && !status) {\n          list = list.filter( entry => entry.satid !== item.satid);\n      }\n      return list;\n  }\n\n  onShowSatMap = () => {\n      this.props.onShowMap(this.state.selected);\n  }\n\n  render() {\n    const satList = this.props.satInfo ? this.props.satInfo.above : [];\n\n    return (\n      <div className=\"sat-list-box\">\n        <div className=\"btn-container\">\n          <Button className=\"sat-list-btn\" type=\"primary\" onClick={this.onShowSatMap} disabled={this.state.selected.length === 0}>\n            Track\n          </Button>\n        </div>\n        <hr />\n        {this.props.isLoad ? (\n          <Spin tip=\"loading\" size=\"large\" />\n        ) : (\n          <List\n            className=\"sat-list\"\n            itemLayout=\"horizontal\"\n            size=\"small\"\n            dataSource={satList}\n            renderItem={(item) => (\n              <List.Item\n                actions={[\n                  <Checkbox dataInfo={item} onChange={this.onChange} />,\n                ]}\n              >\n                <List.Item.Meta\n                  avatar={<Avatar size={50} src={satellite} />}\n                  title={<p>{item.satname}</p>}\n                  description={`Launch Date: ${item.launchDate}`}\n                />\n              </List.Item>\n            )}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default SatelliteList;\n","export const SAT_API_KEY = \"844XGL-F3YG55-4T9H3G-4WXK\";\n\nexport const STARLINK_CATEGORY = \"52\";\n\nexport const NEARBY_SATELLITE = \"rest/v1/satellite/above\";\n\nexport const BASE_URL = \"\";\n\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\n\nexport const SATELLITE_POSITION_URL = \"rest/v1/satellite/positions\";","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n  WORLD_MAP_URL,\n  SATELLITE_POSITION_URL,\n  SAT_API_KEY\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      isDrawing: false\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refMap = React.createRef();\n    this.refTrack = React.createRef();\n  }\n\n  componentDidMount() {\n    axios\n      .get(WORLD_MAP_URL)\n      .then(res => {\n        const { data } = res;\n        const land = feature(data, data.objects.countries).features;\n        this.generateMap(land);\n      })\n      .catch(e => {\n        console.log(\"err in fetch map data \", e.message);\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60;\n\n      this.setState({\n        isLoading: true\n      });\n\n      const urls = this.props.satData.map(sat => {\n        const { satid } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n        return axios.get(url);\n      });\n\n      Promise.all(urls)\n        .then(res => {\n          const arr = res.map(sat => sat.data);\n          this.setState({\n            isLoading: false,\n            isDrawing: true\n          });\n\n          if (!prevState.isDrawing) {\n            this.track(arr);\n          } else {\n            const oHint = document.getElementsByClassName(\"hint\")[0];\n            oHint.innerHTML =\n              \"Please wait for these satellite animation to finish before selection new ones!\";\n          }\n        })\n        .catch(e => {\n          console.log(\"err in fetch satellite position -> \", e.message);\n        });\n    }\n  }\n\n  track = data => {\n    if (!data[0].hasOwnProperty(\"positions\")) {\n      throw new Error(\"no position data\");\n      return;\n    }\n\n    const len = data[0].positions.length;\n    const { duration } = this.props.observerData;\n    const { context2 } = this.map;\n\n    let now = new Date();\n\n    let i = 0;\n\n    let timer = setInterval(() => {\n      let ct = new Date();\n\n      let timePassed = i === 0 ? 0 : ct - now;\n      let time = new Date(now.getTime() + 100 * timePassed);\n\n      context2.clearRect(0, 0, width, height);\n\n      context2.font = \"bold 14px sans-serif\";\n      context2.fillStyle = \"#333\";\n      context2.textAlign = \"center\";\n      context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n      if (i >= len) {\n        clearInterval(timer);\n        this.setState({ isDrawing: false });\n        const oHint = document.getElementsByClassName(\"hint\")[0];\n        oHint.innerHTML = \"\";\n        return;\n      }\n\n      data.forEach(sat => {\n        const { info, positions } = sat;\n        this.drawSat(info, positions[i]);\n      });\n\n      i += 10;\n    }, 100);\n  };\n\n  drawSat = (sat, pos) => {\n    const { satlongitude, satlatitude } = pos;\n\n    if (!satlongitude || !satlatitude) return;\n\n    const { satname } = sat;\n    const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n    const { projection, context2 } = this.map;\n    const xy = projection([satlongitude, satlatitude]);\n\n    context2.fillStyle = this.color(nameWithNumber);\n    context2.beginPath();\n    context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n    context2.fill();\n\n    context2.font = \"bold 11px sans-serif\";\n    context2.textAlign = \"center\";\n    context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n  };\n\n  render() {\n    const { isLoading } = this.state;\n    return (\n      <div className=\"map-box\">\n        {isLoading ? (\n          <div className=\"spinner\">\n            <Spin tip=\"Loading...\" size=\"large\" />\n          </div>\n        ) : null}\n        <canvas className=\"map\" ref={this.refMap} />\n        <canvas className=\"track\" ref={this.refTrack} />\n        <div className=\"hint\" />\n      </div>\n    );\n  }\n\n  generateMap = land => {\n    const projection = geoKavrayskiy7()\n      .scale(170)\n      .translate([width / 2, height / 2])\n      .precision(0.1);\n\n    const graticule = geoGraticule();\n\n    const canvas = d3Select(this.refMap.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const canvas2 = d3Select(this.refTrack.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const context = canvas.node().getContext(\"2d\");\n    const context2 = canvas2.node().getContext(\"2d\");\n\n    let path = geoPath()\n      .projection(projection)\n      .context(context);\n\n    land.forEach(ele => {\n      context.fillStyle = \"#B3DDEF\";\n      context.strokeStyle = \"#000\";\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n\n      context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n\n    this.map = {\n      projection: projection,\n      graticule: graticule,\n      context: context,\n      context2: context2\n    };\n  };\n}\n\nexport default WorldMap;\n","import React, { Component } from \"react\";\nimport { Row, Col } from \"antd\";\nimport SatSetting from \"./SatSetting\";\nimport SatelliteList from \"./SatelliteList\";\nimport WorldMap from \"./WorldMap\";\nimport axios from \"axios\";\nimport {\n  SAT_API_KEY,\n  STARLINK_CATEGORY,\n  NEARBY_SATELLITE,\n  BASE_URL,\n} from \"../constants\";\n\nclass Main extends Component {\n  state = {\n    setting: {},\n    satInfo: {},\n    satList: [],\n    isLoadingList: false,\n  };\n\n  showNearbySatellite = (setting) => {\n    console.log(setting);\n    this.setState({ setting: setting });\n    this.fetchSatellite(setting);\n  };\n  fetchSatellite = (setting) => {\n    console.log(\"fetching\");\n    const { latitude, longitude, elevation, altitude } = setting;\n    const url = `${BASE_URL}/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n    this.setState({ isLoadingList: true });\n\n    axios\n      .get(url)\n      .then((res) => {\n        console.log(res);\n        if (res.status === 200) {\n          this.setState({ satInfo: res.data, isLoadingList: false });\n        }\n      })\n      .catch((err) => {\n        console.log(\"err in fetching satellite: \", err.message);\n        this.setState({ isLoadingList: false });\n      });\n  };\n\n  showMap = (selected) => {\n      this.setState( pre => {\n          return {\n              ...pre,\n              satList: [...selected]\n          }\n      })\n  };\n\n  render() {\n    const { satList, setting, satInfo, isLoadingList } = this.state;\n    return (\n      <Row className=\"main\">\n        <Col span={8} className=\"left-side\">\n          <SatSetting onShow={this.showNearbySatellite} />\n          <SatelliteList\n            satInfo={satInfo}\n            isLoad={isLoadingList}\n            onShowMap={this.showMap}\n          />\n        </Col>\n        <Col span={16} className=\"right-side\">\n          <WorldMap satData={satList} observerData={setting}/>\n        </Col>\n      </Row>\n    );\n  }\n}\nexport default Main;\n","import React from 'react';\nimport Header from './Header';\nimport Footer from \"./Footer\";\nimport Main from './Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './tests/reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}